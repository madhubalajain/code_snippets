
virtualenv - you can separate different python environment for different project

pip install virtualenv

mkdir environment

cd environment

virtualenv project_1

#Activate the environment

source project_1/bin/activate

#install packages in the environment

pip install numpy

# find number of packages install

pip list

#Use global site environment within virtual env

pip freeze --local > requirement.txt

# go back to global environment

deactivate

# delete the environment permanently

rm -rf project_1




INSTALL ANACONDA

It is used by data scientist and comes with lot of packages installed with it

there is minicoda, which has bootstarp version of it which has essential packages only.

when we install anaconda, it should automatically add to the path.

to check -- run python and you will see it is using the python version from anaconda distribution

Package manager for anaconda is ---conda

we can use conda to install non python packages and dependencies

conda --help

# To list all the packages
conda list 


#virtual env
#Pass at least one starting packagae

conda create --name my_app flask 

#activate the virtual env

source activate my_app
pip list

which python

source deactivate

conda create --name my_app2 python=2.7 flask 

conda list env

conda remove --name my_app --all

jupyter notebook

conda export env > environment.yaml

#create environment from that file

conda env create -f environment.yaml


# go to the directory where the virtaul environment is created

conda list env

https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html

source activate my_app

mkdir -p etc/conda/activate.d

mkdir -p etc/conda/deactivate.d

touch etc/conda/activate.d/env_var.sh

touch etc/conda/deactivate.d/env_var.sh


vi etc/conda/activate.d/env_var.sh

#!/bin/sh

export DATABASE_URI="sql://user:pasd@"

vi etc/conda/deactivate.d/env_var.sh

#!/bin/sh
unset DATABASE_URI

source deactivate

source activate my_app

https://github.com/madhubalajain/code_snippets/blob/master/conda_auto_env.sh

put the above script in the ~/.bash_profile


#create python environment with specific version

virtualenv -p /usr/bin/python2.6 project_2

source project_2/bin/activate

pip install -r requirement.txt


##################################

JUPYTER notebook

Markdown can be used

!pip list 
Runs the bash command

Cell Magics % and %%

%lsmagic
%pwd

%%HTML to render the txt as HTML

%%timeit - gives the details of how much time taken for excuting the command

https://github.com/jupyter/jupyter/wiki/A-gallery-of-interesting-Jupyter-Notebooks#introductory-tutorials

#################################################################################

which python3

type python3

echo $PATH

set the path .bash_profile

PATH="/usr/bin:${PATH}"
export PATH

alias python=python3


How to find from where the python is running

python3

import sys

sys.executable

another way to find the location

pip install django

pip show django

make sure the above dependency is in site-package of that python


--------------------------------------------------------


pipenv

- combine pip and virtualenv

pip install pipenv

navigate to project dir

cd my_project/

pipenv install requests

#activate the env
pipenv shell

#deactivate the env
exit

pipenv run python

#run the script

pipenv run python script.py

# install dependecy from requirement file

pipenv install -r requirement.txt

if we want to generate the requirement file

pipenv lock -r

# if we want the dependecy to be available in dev env but not on prod env

pipenv intsall pytest --dev

pipenv uninstall requests

# if you want to change the version of any python dependency, we can edit in pipfile 

pipenv --python 3.6

# To remove the virtual env and recreate from scratch

pipenv --rm

pipenv install

# path to virtual env

pipenv --venv

# to check vulnerability

pipenv check

# dependecy graph

pipenv graph

# to install the packages in prod

pipenv lock

pipenv install --ignore-pipfile

#environment variable

create a new file .env in the same folder

pipenv run python

import os

os.environment['ENV']











